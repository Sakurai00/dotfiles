---

# ====== pyenv ======

- name: Check if pyenv is installed
  ansible.builtin.shell:
    "pyenv -v"
  register: pyenv_exists
  ignore_errors: true

- name: Install pyenv
  when: pyenv_exists is failed
  ansible.builtin.shell:
    "anyenv install pyenv"
  environment:
    PATH: "{{ home }}/.anyenv/bin:{{ ansible_env.PATH }}"

# - name: Init anyenv
#   when: pyenv_exists is failed
#   ansible.builtin.shell:
#     "eval '$(anyenv init -)'"

# ====== python ======

- name: Check if python is installed
  ansible.builtin.shell:
    "python3 -V"
  register: python_exists
  ignore_errors: true

- name: Install python
  when: python_exists is failed
  ansible.builtin.shell:
    "pyenv install 3.11.2"

- name: Set global version
  when: python_exists is failed
  ansible.builtin.shell:
    "pyenv global 3.11.2"

- name: Install pip3
  become: true
  ansible.builtin.apt:
    name: python3-pip
    state: latest

# ====== poetry ======

- name: Check if poetry is installed
  ansible.builtin.shell:
    "poetry --version"
  register: poetry_exists
  ignore_errors: true

- name: Install poetry
  when: poetry_exists is failed
  ansible.builtin.shell:
    "curl -sSL https://install.python-poetry.org | python3 -"

- name: Set poetry config
  ansible.builtin.shell:
    "poetry config virtualenvs.in-project true"
